'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7'th triangle number would be 1+2+3+4+5+6+7=28. The first ten terms would be:
1,3,6,10,15,21,28,36,45,55,...

Let us list the factors of the first seven triangle numbers:
1:1
3: 1,3
6: 1,2,3,6
10:1,2,5,10
15:1,3,5,15
21: 1,3,7,21
28:1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over N divisors?

Input Format

First line T, the number of testcases. Each testcase consists of N in one line.


Output Format

For each testcase, print the required answer in one line.

Sample Input

4
1
2
3
4
Sample Output

3
6
6
28

'''


def f(n):
    factors = {}
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            factors[i] = 1
            factors[n // i] = 1
    return len(factors)

def triangle_factors(n):
    return f(n//2) * f(n+1) if n % 2 == 0 else f(n) * f((n+1)//2)
    
def first_triangle_number(n):
    i = 1
    while (triangle_factors(i) <= n): 
        i = i + 1
    return i*(i+1)//2

        
t= int(input())
for i in range(t):
    n=int(input())
    res=first_triangle_number(n)
    print(res)
